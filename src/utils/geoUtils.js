import pgwData from "../data/mapImages/pgwData";
import geoMapping from "../data/mapImages/geoMapping";
import { generateImageBounds } from "@utils/mapUtils";
import { getImageSize } from "@utils/imageUtils";
import mapConfig from "../data/mapImages/mapConfig"; // Importar configuraciones de mapas

let cachedMaps = {}; // Cache para evitar rec√°lculos innecesarios

// üìå Funci√≥n para generar la configuraci√≥n completa de un mapa
export const generateMapConfig = async ({ name, shadow = true, regionZoomLimits = { min: 6, max: 10, interpolationSpeed: 0.6 } , backLink="/"}) => {
  try {
    const pgwValues = pgwData[name];
    const geoValues = geoMapping[name];
    const config = mapConfig[name] || {}; // Obtener configuraci√≥n espec√≠fica del mapa

    if (!pgwValues) {
      console.warn(`‚ö†Ô∏è No existen datos de PGW para el mapa "${name}".`);
      return null;
    }
    
    if (!geoValues) {
      console.warn(`‚ö†Ô∏è No existen im√°genes en geoMapping para el mapa "${name}".`);
      return null;
    }

    // Extraer valores del array de PGW
    const [a, scaleX, scaleY, d, lon, lat] = pgwValues;
    const images = { ...geoValues }; // Copia de im√°genes

    // Obtener tama√±o de imagen
    let width = 1, height = 1; // Valores por defecto
    try {
      const size = await getImageSize(images.high);
      if (size?.width > 0 && size?.height > 0) {
        width = size.width;
        height = size.height;
      } else {
        console.warn(`‚ö†Ô∏è Imagen "${name}" tiene dimensiones inv√°lidas. Usando valores por defecto.`);
      }
    } catch (error) {
      console.error(`‚ùå Error al obtener tama√±o de la imagen para "${name}":`, error);
    }

    // C√°lculo autom√°tico de imageBounds con validaci√≥n
    const imageBounds = generateImageBounds({
      initialCoordinates: [lon, lat],
      width,
      height,
      scaleX,
      scaleY,
    });

    console.log(`üåç Mapa generado: ${name} | üñºÔ∏è ${width}x${height} | üìç imageBounds:`, imageBounds);

    return {
      name,
      initialCoordinates: [lon, lat],
      width,
      height,
      scaleX,
      scaleY,
      imageBounds,
      images,
      regionZoomLimits,
      shadow,
      backLink,
      ...config, // Agregar configuraciones espec√≠ficas del mapa
    };
  } catch (error) {
    console.error(`‚ùå Error al generar la configuraci√≥n del mapa "${name}":`, error);
    return null;
  }
};

// üìå Funci√≥n para obtener la configuraci√≥n de los mapas de un cap√≠tulo
export const getChapterMaps = async (mapConfigs) => {
  try {
    const cacheKey = JSON.stringify(mapConfigs);
    
    if (cachedMaps[cacheKey]) {
      console.log("‚ôªÔ∏è Usando mapas en cach√©...");
      return cachedMaps[cacheKey]; // Retorna mapas ya generados
    }

    console.log("üõ† Generando nuevos mapas...");
    const maps = await Promise.all(mapConfigs.map(generateMapConfig));
    const validMaps = maps.filter((map) => map !== null); // Filtrar mapas inv√°lidos

    if (validMaps.length === 0) {
      console.warn("‚ö†Ô∏è No se generaron mapas v√°lidos.");
    }

    cachedMaps[cacheKey] = validMaps; // Guardar en cach√©
    return validMaps;
  } catch (error) {
    console.error("‚ùå Error al obtener los mapas del cap√≠tulo:", error);
    return []; //  Retornar un array vac√≠o en caso de error
  }
};